version: 2.1
executors:
  ci-executor:
    machine:
      image: circleci/classic:201808-01
commands:
  getdependencies:
    description: "Download and cache all the necessary dependencies"
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            # Find the most recently generated cache used from any branch
            - v1-npm-deps-
      - run:
          name: Setup NVM
          command: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Install Node 12.16.1
          command: |
            nvm install 12.16.1
            nvm alias default 12.16.1
      - run:
          name: Print Node Version
          command: 'node -v'
      - run:
          name: Print NPM Version
          command: 'npm -v'
      - run:
          name: Install Node Modules
          command: 'npm install'
      - save_cache:
          paths:
            - node
            - node_modules
          key: v1-npm-deps-{{ checksum "package-lock.json" }}

jobs:
    build:
        executor: ci-executor
        steps:
            - getdependencies
            - run:
                name: build
                command: 'npm build'
    test:
        executor: ci-executor
        steps:
            - getdependencies
            - run:
                name: Run Tests
                command: 'npm run test'
    dark-deploy:
        docker:
         - image: eddiewebb/queue-circleci-openjdk:8-jdk-browsers
        steps:
            - run:
                name: Setup CF CLI
                command: |
                  curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
                  sudo dpkg -i cf-cli_amd64.deb
                  cf -v
                  cf login -a https://api.fr.cloud.gov -u $DEPLOYER_SERVICE_ACCOUNT_USERNAME -p $CF_PASSWORD -o $CF_ORG  -s "dev"
            - run:
                name: CF Deploy
                command: |
                  # push artifacts , and set environment variables before running `cf start`.
                  # cf push --no-start fheo  -n fheo
                  cf push --no-start fheo-dark  -n dark
                  # Pass CircleCI variables to Cloud Foundry (optional)
                  # cf set-env <app-name-dark> circle_build_num ${CIRCLE_BUILD_NUM}
                  # cf set-env <app-name-dark> circle_commit ${CIRCLE_SHA1}
                  # cf set-env <app-name-dark> circle_workflow_guid ${CIRCLE_WORKFLOW_ID}
                  # cf set-env <app-name-dark> circle_user ${CIRCLE_PROJECT_USERNAME}
                  # cf set-env <app-name-dark> circle_repo ${CIRCLE_PROJECT_REPONAME}
                  # Start the application
                  cf start fheo
                  # Ensure dark route is exclusive to dark app
                  cf unmap-route fheo -n dark || echo "Dark Route Already exclusive"
    live-deploy:
      executor: ci-executor
      steps:              
          - run:
              name: Re-route live Domain to latest
              command: |
                        # Send "real" url to new version
                        cf map-route app-name-dark example.com -n www
                        # Stop sending traffic to previous version
                        cf unmap-route app-name example.com -n www
                        # stop previous version
                        cf stop app-name
                        # delete previous version
                        cf delete app-name -f
                        # Switch name of "dark" version to claim correct name
                        cf rename app-name-dark app-name              
                  
workflows:
  version: 2
  Build_Test_Deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - dark-deploy:
          requires:
            - test
          filters:
            branches:
              only: ci/cd-pipeline
      - hold:
          type: approval
          requires:
             - dark-deploy
          filters:
            branches:
              only: ci/cd-pipeline
      - live-deploy:
          requires:
            - hold # manual approval required via the CircleCI UI to run the live-deploy job
          filters:
            branches:
              only: ci/cd-pipeline